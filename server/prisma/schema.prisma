generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector(schema: "public")]
}

model Bot {
  id                      String           @id @default(cuid())
  publicId                String           @unique @default(uuid())
  name                    String
  description             String?
  createdAt               DateTime         @default(now())
  user_id                 String
  user                    User             @relation(fields: [user_id], references: [user_id])
  temperature             Float            @default(0.7)
  model                   String           @default("gpt-3.5-turbo")
  provider                String           @default("openai")
  embedding               String           @default("openai")
  questionGeneratorPrompt String           @default("Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.   Chat History: {chat_history} Follow Up Input: {question} Standalone question:")
  qaPrompt                String           @default("You are a helpful AI assistant. Use the following pieces of context to answer the question at the end. If you don't know the answer, just say you don't know. DO NOT try to make up an answer. If the question is not related to the context, politely respond that you are tuned to only answer questions that are related to the context.  {context}  Question: {question} Helpful answer in markdown:")
  streaming               Boolean          @default(false)
  showRef                 Boolean          @default(false)
  BotAppearance           BotAppearance[]
  document                BotDocument[]
  BotIntegration          BotIntegration[]
  source                  BotSource[]
}

model BotSource {
  id        String        @id @default(cuid())
  botId     String
  type      String        @default("website")
  content   String?
  location  String?
  isPending Boolean       @default(true)
  status    String        @default("pending")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  options   Json?         @db.Json
  document  BotDocument[]
  bot       Bot           @relation(fields: [botId], references: [id])
}

model BotDocument {
  id        Int                   @id @default(autoincrement())
  sourceId  String
  botId     String
  content   String
  embedding Unsupported("vector")
  metadata  Json
  bot       Bot                   @relation(fields: [botId], references: [id])
  source    BotSource             @relation(fields: [sourceId], references: [id])
}

model User {
  user_id      String   @id
  email        String
  isFirstLogin Boolean  @default(true)
  Bots         Bot[]
  createdAt    DateTime @default(now())
}

model BotIntegration {
  id                                Int      @id @default(autoincrement())
  provider                          String
  telegram_bot_token                String?
  is_pause                          Boolean? @default(false)
  bot_id                            String
  identifier                        String
  discord_bot_token                 String?
  discord_slash_command             String?  @default("hey")
  discord_slash_command_description String?  @default("Use this command to get help")
  discord_application_id            String?
  Bot                               Bot      @relation(fields: [bot_id], references: [id], onDelete: Cascade)
}

model BotTelegramHistory {
  id         Int     @id @default(autoincrement())
  chat_id    Int?
  identifier String?
  human      String?
  bot        String?
}

model BotDiscordHistory {
  id         Int     @id @default(autoincrement())
  chat_id    String?
  identifier String?
  human      String?
  bot        String?
}

model BotAppearance {
  id                      Int     @id @default(autoincrement())
  bot_id                  String
  bot_name                String
  first_message           String
  // theme                   String?
  background_color        String?
  chat_bot_bubble_style   Json?   @db.Json
  chat_human_bubble_style Json?   @db.Json
  Bot                     Bot     @relation(fields: [bot_id], references: [id], onDelete: Cascade)
}
